openapi: 3.0.0
info:
  title: 'My First API'
  version: '0.1'
servers:
  -
    url: 'https://sandbox.exads.rocks/'
paths:
  /items:
    get:
      tags:
        - Items
      summary: 'Requires Authentication'
      description: 'Search for all Items, if found return it'
      operationId: b8cb5827c1a9a4acd294c8468d986612
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: showDeleted
          in: query
          description: 'true or false, based on if you want to see the deleted Item'
          required: true
          schema:
            type: string
        -
          name: pageNumber
          in: query
          description: 'number of the page, default is 1'
          required: false
          schema:
            type: string
        -
          name: recordsPerPage
          in: query
          description: 'number of records presented on the page, default is 10'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { type: array, items: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: itemName }, status: { type: string, example: 'to do' }, sectionId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object } }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
    post:
      tags:
        - Items
      summary: 'Require Authentication'
      description: 'Create a Item, if success return it'
      operationId: ab07ad2bfca11186b7e1b01bebf09968
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: name
                sectionId:
                  type: integer
                  example: 1
              type: object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: name }, status: { type: string, example: 'to do' }, sectionId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '400':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 400 }
                  error: { properties: { type: { type: string, example: BAD_REQUEST }, description: { type: string, example: 'Payload is not valid, is missing the name field.' } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
  '/items/{id}':
    get:
      tags:
        - Items
      summary: 'Requires Authentication'
      description: 'Search for specific Item by id, if found return it'
      operationId: 4360ad8099197be7423a65d32fe9f192
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the Item'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: itemName }, status: { type: string, example: 'to do' }, sectionId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The Item does not exist.' } }, type: object }
                type: object
    delete:
      tags:
        - Items
      summary: 'Requires Authentication'
      description: 'Delete a Item'
      operationId: e3cec50324b2cc6d5048b95e358b7e96
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the Item'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { message: { type: string, example: 'Item with id 5 deleted' }, hasSuccess: { type: boolean, example: true } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The Item does not exist.' } }, type: object }
                type: object
    patch:
      tags:
        - Items
      summary: 'Requires Authentication'
      description: 'Update a item, if success return it'
      operationId: 22c8ecd093d631510fe9d22ff293ec88
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the Item'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                status:
                  type: string
              type: object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: itemName }, status: { type: string, example: status }, sectionId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '400':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 400 }
                  error: { properties: { type: { type: string, example: BAD_REQUEST }, description: { type: string, example: 'Payload is not valid, is missing the status field.' } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The Item does not exist.' } }, type: object }
                type: object
  /sections:
    get:
      tags:
        - Sections
      summary: 'Requires Authentication'
      description: 'Search for all Sections, if found return it'
      operationId: e70b705c2c21a106c5e17d54e4257b5d
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: showDeleted
          in: query
          description: 'true or false, based on if you want to see the deleted Section'
          required: true
          schema:
            type: string
        -
          name: pageNumber
          in: query
          description: 'number of the page, default is 1'
          required: false
          schema:
            type: string
        -
          name: recordsPerPage
          in: query
          description: 'number of records presented on the page, default is 10'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { type: array, items: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: SectionName }, tabId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object } }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
    post:
      tags:
        - Sections
      summary: 'Require Authentication'
      description: 'Create a section, if success return it'
      operationId: 240b03361f12fbbd98cfd211839e66c0
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Section
                tabId:
                  type: integer
                  example: 1
              type: object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: SectionName }, tabId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '400':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 400 }
                  error: { properties: { type: { type: string, example: BAD_REQUEST }, description: { type: string, example: 'Payload is not valid, is missing the name field.' } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
  '/sections/{id}':
    get:
      tags:
        - Sections
      summary: 'Requires Authentication'
      description: 'Search for specific Section by id, if found return it'
      operationId: d3e24a0e15354d1b242024cb40b4540e
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the Section'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: SectionName }, tabId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The Section does not exist.' } }, type: object }
                type: object
    delete:
      tags:
        - Sections
      summary: 'Requires Authentication'
      description: 'Delete a Section'
      operationId: 2bc30247eba92feea2a5f4b415f3717a
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the Section'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { message: { type: string, example: 'Section with id 5 deleted' }, hasSuccess: { type: boolean, example: true } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The Section does not exist.' } }, type: object }
                type: object
    patch:
      tags:
        - Sections
      summary: 'Requires Authentication'
      description: 'Update a Section, if success return it'
      operationId: 4d4de60c25d64339740358cb480f327d
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the Section'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              type: object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: SectionName }, tabId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '400':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 400 }
                  error: { properties: { type: { type: string, example: BAD_REQUEST }, description: { type: string, example: 'Payload is not valid, is missing the name field.' } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The Section does not exist.' } }, type: object }
                type: object
  /tabs:
    get:
      tags:
        - Tabs
      summary: 'Requires Authentication'
      description: 'Search for all Tabs, if found return it'
      operationId: 0a8c46e4a12e68a93e5d13ac4ae2759b
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: showDeleted
          in: query
          description: 'true or false, based on if you want to see the deleted Tabs'
          required: true
          schema:
            type: string
        -
          name: pageNumber
          in: query
          description: 'number of the page, default is 1'
          required: false
          schema:
            type: string
        -
          name: recordsPerPage
          in: query
          description: 'number of records presented on the page, default is 10'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer }
                  data: { type: array, items: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: Name }, ticketId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object } }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
    post:
      tags:
        - Tabs
      summary: 'Requires Authentication'
      description: 'Create a Tab, if success return it'
      operationId: c688816d9971c58542c6c0c3ee81b854
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: Tab
                ticketId:
                  type: integer
                  example: 1
              type: object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: TicketName }, ticketId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '400':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 400 }
                  error: { properties: { type: { type: string, example: BAD_REQUEST }, description: { type: string, example: 'Payload is not valid, is missing the name field.' } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
  '/tabs/{id}':
    get:
      tags:
        - Tabs
      summary: 'Requires Authentication'
      description: 'Search for specific Tab by id, if found return it'
      operationId: d5c8dfea0aa54349cb6e16ea14b66c30
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the Tab'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: Name }, ticketId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The Tab does not exist.' } }, type: object }
                type: object
    delete:
      tags:
        - Tabs
      summary: 'Requires Authentication'
      description: 'Delete a Tab'
      operationId: 1acd1b5577c29006cb01f6ee02e2cb8d
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the Tab'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { message: { type: string, example: 'Tab with id 5 deleted' }, hasSuccess: { type: boolean, example: true } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The Tab does not exist.' } }, type: object }
                type: object
  '/tab/{id}':
    patch:
      tags:
        - Tabs
      summary: 'Requires Authentication'
      description: 'Update a Tab, if success return it'
      operationId: 0a95d3aa6265d18fffc84dba0fe15c63
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the Tab'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              type: object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: Name }, ticketId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '400':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 400 }
                  error: { properties: { type: { type: string, example: BAD_REQUEST }, description: { type: string, example: 'Payload is not valid, is missing the name field.' } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The Tab does not exist.' } }, type: object }
                type: object
  /tickets:
    get:
      tags:
        - Tickets
      summary: 'Requires Authentication'
      description: 'Search for all Tickets, if found return it'
      operationId: 582451cdb79d3a0565221acee4e5cd25
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: showDeleted
          in: query
          description: 'true or false, based on if you want to see the deleted Tickets'
          required: true
          schema:
            type: string
        -
          name: pageNumber
          in: query
          description: 'number of the page, default is 1'
          required: false
          schema:
            type: string
        -
          name: recordsPerPage
          in: query
          description: 'number of records presented on the page, default is 10'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer }
                  data: { type: array, items: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: TicketName }, userId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object } }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
    post:
      tags:
        - Tickets
      summary: 'Requires Authentication'
      description: 'Create a Ticket, if success return it'
      operationId: e1688fdf0fe222b4c77f2cc85334f2f4
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              type: object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: TicketName }, userId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '400':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 400 }
                  error: { properties: { type: { type: string, example: BAD_REQUEST }, description: { type: string, example: 'Payload is not valid, is missing the name field.' } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
  '/tickets/{id}':
    get:
      tags:
        - Tickets
      summary: 'Requires Authentication'
      description: 'Search for specific Ticket by id, if found return it'
      operationId: 85d40419917247e9c9dde18d6720d248
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the Ticket'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: TicketName }, userId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The Ticket does not exist.' } }, type: object }
                type: object
    delete:
      tags:
        - Tickets
      summary: 'Requires Authentication'
      description: 'Delete a Ticket'
      operationId: e8502761d036f914e66a8f73c644702b
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the Ticket'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { message: { type: string, example: 'Ticket with id 5 deleted' }, hasSuccess: { type: boolean, example: true } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The Ticket does not exist.' } }, type: object }
                type: object
    patch:
      tags:
        - Tickets
      summary: 'Requires Authentication'
      description: 'Update a Ticket, if success return it'
      operationId: 02a46c9956b32b10e4638ef588914135
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the Ticket'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              type: object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, name: { type: string, example: TicketName }, userId: { type: integer, example: 1 }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '400':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 400 }
                  error: { properties: { type: { type: string, example: BAD_REQUEST }, description: { type: string, example: 'Payload is not valid, is missing the name field.' } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The Ticket does not exist.' } }, type: object }
                type: object
  /users:
    get:
      tags:
        - Users
      summary: 'Requires Authentication'
      description: 'Search for all Users, if found return it'
      operationId: c54f94d6d3373769c1d7cf3dfe97841d
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: showDeleted
          in: query
          description: 'true or false, based on if you want to see the deleted Users'
          required: true
          schema:
            type: string
        -
          name: pageNumber
          in: query
          description: 'number of the page, default is 1'
          required: false
          schema:
            type: string
        -
          name: recordsPerPage
          in: query
          description: 'number of records presented on the page, default is 10'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer }
                  hasNextPage: { type: boolean }
                  data: { type: array, items: { properties: { id: { type: integer }, username: { type: string }, role: { type: string }, isActive: { type: boolean } }, type: object } }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
    post:
      tags:
        - Users
      description: 'Create user, if success return it'
      operationId: 8dad1c4d10997f2e659a3210d23a7fee
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                role:
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
              type: object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                required:
                  - statusCode
                  - data
                properties:
                  statusCode: { type: integer }
                  data: { required: [id, username, role, isActive], properties: { id: { type: integer }, username: { type: string }, role: { type: string }, isActive: { type: boolean } }, type: object }
                type: object
  '/users/{id}':
    get:
      tags:
        - Users
      summary: 'Requires Authentication'
      description: 'Search for an User, if found return it'
      operationId: dc36fd290dc024d1a13bdc9e8c7c4bc2
      parameters:
        -
          name: id
          in: path
          description: 'Id of the user'
          required: true
          schema:
            type: integer
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer }
                  data: { properties: { id: { type: integer }, username: { type: string }, role: { type: string }, isActive: { type: boolean } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'The user you requested does not exist.' } }, type: object }
                type: object
    delete:
      tags:
        - Users
      summary: 'Requires Authentication'
      description: 'Delete a User'
      operationId: 6a583c710458493a3d9888df25475de3
      parameters:
        -
          name: id
          in: path
          description: 'id of the User'
          required: true
          schema:
            type: integer
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { message: { type: string, example: 'vitor deleted' }, hasSuccess: { type: boolean, example: true } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '405':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: NOT_ALLOWED }, description: { type: string, example: 'Method not allowed. Must be one of: GET, OPTIONS' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'User username does not exist.' } }, type: object }
                type: object
    patch:
      tags:
        - Users
      summary: 'Requires Authentication'
      description: 'Update a User username, if success return it'
      operationId: 5667cd08c0df806334cc79071d3e9890
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the User'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
              type: object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { id: { type: integer, example: 1 }, username: { type: string, example: Vitor }, role: { type: string, example: client }, isActive: { type: boolean, example: true } }, type: object }
                type: object
        '400':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 400 }
                  error: { properties: { type: { type: string, example: BAD_REQUEST }, description: { type: string, example: 'Payload is not valid, is missing the oldPassword field.' } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHORIZED }, description: { type: string, example: 'The user that you are trying to update is not yours.' } }, type: object }
                type: object
  /users/login:
    post:
      tags:
        - Users
      description: 'Log in, if success return token'
      operationId: 029f47144ebf6cbe68a93de7791d5463
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                password:
                  type: string
              type: object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer }
                  data: { properties: { token: { type: string }, hasSuccess: { type: boolean } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Password is wrong.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 404 }
                  error: { properties: { type: { type: string, example: RESOURCE_NOT_FOUND }, description: { type: string, example: 'User username does not exist.' } }, type: object }
                type: object
  '/users/password/{id}':
    patch:
      tags:
        - Users
      summary: 'Requires Authentication'
      description: 'Update a User password'
      operationId: 8edcccfc7863d423f3b80efaa436db5e
      parameters:
        -
          name: Auth-Token
          in: header
          description: 'Token for authentication'
          required: true
          schema:
            type: string
        -
          name: id
          in: path
          description: 'Id of the User'
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
              type: object
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 200 }
                  data: { properties: { message: { type: string, example: 'Vitor password was successfully updated' }, hasSuccess: { type: boolean, example: true } }, type: object }
                type: object
        '400':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 400 }
                  error: { properties: { type: { type: string, example: BAD_REQUEST }, description: { type: string, example: 'Payload is not valid, is missing the oldPassword field.' } }, type: object }
                type: object
        '401':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHENTICATED }, description: { type: string, example: 'Log in to get an valid auth token.' } }, type: object }
                type: object
        '403':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 403 }
                  error: { properties: { type: { type: string, example: INSUFFICIENT_PRIVILEGES }, description: { type: string, example: 'Auth-Token is missing on the header.' } }, type: object }
                type: object
        '404':
          description: ok
          content:
            application/json:
              schema:
                properties:
                  statusCode: { type: integer, example: 401 }
                  error: { properties: { type: { type: string, example: UNAUTHORIZED }, description: { type: string, example: 'The user that you are trying to update is not yours.' } }, type: object }
                type: object
